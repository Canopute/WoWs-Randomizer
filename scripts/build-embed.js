// Build script to fetch Tier X and XI ships with Nation/Class from the WoWS Global Wiki
// Outputs main.data.js containing window.EMBEDDED_SHIPS = [...] for full offline embed.
// Run with: node scripts/build-embed.js

const fs = require('fs');
const path = require('path');
const cheerio = require('cheerio');

const URL = 'https://wiki.wargaming.net/en/Ship:List_of_Ships';

const TIER_MAP = { X: 10, XI: 11 };

const NATION_NORMALIZE = {
  'U.S.A.': 'USA', 'USA': 'USA', 'United States': 'USA',
  'U.S.S.R.': 'USSR', 'U.S.S.R': 'USSR', 'Soviet Union': 'USSR',
  'Japan': 'Japan', 'Germany': 'Germany', 'U.K.': 'UK', 'UK': 'UK', 'Great Britain': 'UK',
  'France': 'France', 'Poland': 'Poland', 'Pan-Asia': 'Pan-Asia', 'Pan Asia': 'Pan-Asia',
  'Italy': 'Italy', 'Europe': 'Europe', 'Commonwealth': 'Commonwealth',
  'Pan-America': 'Pan-America', 'Pan America': 'Pan-America', 'Spain': 'Spain', 'Netherlands': 'Netherlands'
};

const CLASS_NORMALIZE = {
  'A': 'Carrier', 'Aircraft Carrier': 'Carrier', 'Aircraft carrier': 'Carrier', 'Carrier': 'Carrier',
  'B': 'Battleship', 'Battleship': 'Battleship',
  'C': 'Cruiser', 'Cruiser': 'Cruiser',
  'D': 'Destroyer', 'Destroyer': 'Destroyer',
  'S': 'Submarine', 'Submarine': 'Submarine'
};

function normalizeNation(n) {
  if (!n) return 'Unknown';
  return NATION_NORMALIZE[n.trim()] || n.trim();
}

function normalizeClass(c) {
  if (!c) return 'Unknown';
  return CLASS_NORMALIZE[c.trim()] || c.trim();
}

function parseTier(val) {
  if (!val) return null;
  const t = val.trim().toUpperCase();
  if (TIER_MAP[t]) return TIER_MAP[t];
  if (t === '10') return 10;
  if (t === '11') return 11;
  // Sometimes appears as 'Tier X' etc.
  const m = t.match(/(XI|X|11|10)/);
  if (!m) return null;
  return m[1] === 'XI' || m[1] === '11' ? 11 : 10;
}

async function fetchAll() {
  const res = await fetch(URL, { headers: { 'User-Agent': 'wows-randomizer/1.0' } });
  if (!res.ok) throw new Error('Failed to fetch wiki list');
  const html = await res.text();
  const $ = cheerio.load(html);

  const ships = [];
  $('table.wikitable').each((_, table) => {
    const $table = $(table);
    const headers = [];
    $table.find('tr').first().find('th').each((i, th) => {
      headers[i] = $(th).text().trim();
    });

    function hIndex(...names) {
      for (const n of names) {
        const idx = headers.findIndex(h => h.toLowerCase() === n.toLowerCase());
        if (idx !== -1) return idx;
      }
      return -1;
    }

    const iName = hIndex('Name', 'Ship');
    const iNation = hIndex('Nation');
    const iType = hIndex('Type', 'Class');
    const iTier = hIndex('Tier');
    if (iName === -1 || iTier === -1) return;

    $table.find('tr').slice(1).each((_, tr) => {
      const $cells = $(tr).find('td,th');
      if ($cells.length === 0) return;
      const nameCell = $cells.eq(iName);
      const tierCell = $cells.eq(iTier);
      const nationCell = iNation !== -1 ? $cells.eq(iNation) : null;
      const typeCell = iType !== -1 ? $cells.eq(iType) : null;

      const name = (nameCell.find('a').first().text().trim() || nameCell.text().trim());
      const tier = parseTier(tierCell.text());
      if (tier !== 10 && tier !== 11) return;

      const nation = normalizeNation(nationCell ? nationCell.text() : '');
      const sclass = normalizeClass(typeCell ? typeCell.text() : '');

      if (!name) return;
      ships.push({ name, tier, nation, class: sclass });
    });
  });

  // Deduplicate by name, keep first
  const seen = new Set();
  const unique = [];
  for (const s of ships) {
    if (seen.has(s.name)) continue;
    seen.add(s.name);
    unique.push(s);
  }

  unique.sort((a, b) => a.name.localeCompare(b.name));
  return unique;
}

async function main() {
  const list = await fetchAll();
  const outPath = path.join(__dirname, '..', 'main.data.js');
  const content = `// Auto-generated by scripts/build-embed.js\n// Full Tier X + XI list with Nation/Class (offline)\nwindow.EMBEDDED_SHIPS = ${JSON.stringify(list, null, 2)};\n`;
  fs.writeFileSync(outPath, content, 'utf-8');
  console.log(`Wrote ${list.length} ships to ${outPath}`);
}

main().catch(err => {
  console.error(err);
  process.exit(1);
});
